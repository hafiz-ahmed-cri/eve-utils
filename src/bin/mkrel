#!/usr/bin/env python

import os
import argparse
import itertools
from libcst import *
from singplu import get_pair



class DomainDefinitionInserter(CSTTransformer):
    def __init__(self, parent, child, parents, children):
        self.parent = parent
        self.child = child
        self.parents = parents
        self.children = children

    def visit_SimpleStatementLine(self, node):
        if not isinstance(node.body[0], Assign):
            return False
            
        if not node.body[0].targets[0].target.value == 'DOMAIN_RELATIONS':
            return False
            
        return True
        

    def leave_Assign(self, original_node, updated_node):
        new_elements = []
        for item in original_node.value.elements:
            new_elements.append(item)
        new_elements.append(self.make_domain_relation())    
        
        relations = Dict(elements=new_elements,
                lbrace=LeftCurlyBrace(
                    whitespace_after=ParenthesizedWhitespace(
                        first_line=TrailingWhitespace(
                            whitespace=SimpleWhitespace(
                                value='',
                            ),
                            comment=None,
                            newline=Newline(
                                value=None,
                            ),
                        ),
                        empty_lines=[],
                        indent=True,
                        last_line=SimpleWhitespace(
                            value='    ',
                        ),
                    ),
                ),
                rbrace=RightCurlyBrace(
                    whitespace_before=ParenthesizedWhitespace(
                        first_line=TrailingWhitespace(
                            whitespace=SimpleWhitespace(
                                value='',
                            ),
                            comment=None,
                            newline=Newline(
                                value=None,
                            ),
                        ),
                        empty_lines=[],
                        indent=True,
                        last_line=SimpleWhitespace(
                            value='',
                        ),
                    ),
                ),
                lpar=[],
                rpar=[],
            )
            
        return updated_node.with_changes (value=relations)


    def make_domain_relation(self):
        return DictElement(
            key=SimpleString(
                value=f"'{self.parents}_{self.children}'",
                lpar=[],
                rpar=[],
            ),
            value=Dict(
                elements=[
                    DictElement(
                        key=SimpleString(
                            value="'schema'",
                            lpar=[],
                            rpar=[],
                        ),
                        value=Attribute(
                            value=Name(
                                value=f'{self.children}',
                                lpar=[],
                                rpar=[],
                            ),
                            attr=Name(
                                value='SCHEMA',
                                lpar=[],
                                rpar=[],
                            ),
                            dot=Dot(
                                whitespace_before=SimpleWhitespace(
                                    value='',
                                ),
                                whitespace_after=SimpleWhitespace(
                                    value='',
                                ),
                            ),
                            lpar=[],
                            rpar=[],
                        ),
                        comma=Comma(
                            whitespace_before=SimpleWhitespace(
                                value='',
                            ),
                            whitespace_after=ParenthesizedWhitespace(
                                first_line=TrailingWhitespace(
                                    whitespace=SimpleWhitespace(
                                        value='',
                                    ),
                                    comment=None,
                                    newline=Newline(
                                        value=None,
                                    ),
                                ),
                                empty_lines=[],
                                indent=True,
                                last_line=SimpleWhitespace(
                                    value='        ',
                                ),
                            ),
                        ),
                        whitespace_before_colon=SimpleWhitespace(
                            value='',
                        ),
                        whitespace_after_colon=SimpleWhitespace(
                            value=' ',
                        ),
                    ),
                    DictElement(
                        key=SimpleString(
                            value="'url'",
                            lpar=[],
                            rpar=[],
                        ),
                        value=SimpleString(
                            value=f'\'venues/<regex("[a-f0-9]{{24}}"):_{self.parent}_ref>/{self.children}\'',
                            lpar=[],
                            rpar=[],
                        ),
                        comma=Comma(
                            whitespace_before=SimpleWhitespace(
                                value='',
                            ),
                            whitespace_after=ParenthesizedWhitespace(
                                first_line=TrailingWhitespace(
                                    whitespace=SimpleWhitespace(
                                        value='',
                                    ),
                                    comment=None,
                                    newline=Newline(
                                        value=None,
                                    ),
                                ),
                                empty_lines=[],
                                indent=True,
                                last_line=SimpleWhitespace(
                                    value='        ',
                                ),
                            ),
                        ),
                        whitespace_before_colon=SimpleWhitespace(
                            value='',
                        ),
                        whitespace_after_colon=SimpleWhitespace(
                            value=' ',
                        ),
                    ),
                    DictElement(
                        key=SimpleString(
                            value="'resource_title'",
                            lpar=[],
                            rpar=[],
                        ),
                        value=SimpleString(
                            value=f"'{self.children}'",
                            lpar=[],
                            rpar=[],
                        ),
                        comma=Comma(
                            whitespace_before=SimpleWhitespace(
                                value='',
                            ),
                            whitespace_after=ParenthesizedWhitespace(
                                first_line=TrailingWhitespace(
                                    whitespace=SimpleWhitespace(
                                        value='',
                                    ),
                                    comment=None,
                                    newline=Newline(
                                        value=None,
                                    ),
                                ),
                                empty_lines=[],
                                indent=True,
                                last_line=SimpleWhitespace(
                                    value='        ',
                                ),
                            ),
                        ),
                        whitespace_before_colon=SimpleWhitespace(
                            value='',
                        ),
                        whitespace_after_colon=SimpleWhitespace(
                            value=' ',
                        ),
                    ),
                    DictElement(
                        key=SimpleString(
                            value="'datasource'",
                            lpar=[],
                            rpar=[],
                        ),
                        value=Dict(
                            elements=[
                                DictElement(
                                    key=SimpleString(
                                        value="'source'",
                                        lpar=[],
                                        rpar=[],
                                    ),
                                    value=SimpleString(
                                        value=f"'{self.children}'",
                                        lpar=[],
                                        rpar=[],
                                    ),
                                    comma=MaybeSentinel.DEFAULT,
                                    whitespace_before_colon=SimpleWhitespace(
                                        value='',
                                    ),
                                    whitespace_after_colon=SimpleWhitespace(
                                        value=' ',
                                    ),
                                ),
                            ],
                            lbrace=LeftCurlyBrace(
                                whitespace_after=SimpleWhitespace(
                                    value='',
                                ),
                            ),
                            rbrace=RightCurlyBrace(
                                whitespace_before=SimpleWhitespace(
                                    value='',
                                ),
                            ),
                            lpar=[],
                            rpar=[],
                        ),
                        comma=MaybeSentinel.DEFAULT,
                        whitespace_before_colon=SimpleWhitespace(
                            value='',
                        ),
                        whitespace_after_colon=SimpleWhitespace(
                            value=' ',
                        ),
                    ),
                ],
                lbrace=LeftCurlyBrace(
                    whitespace_after=ParenthesizedWhitespace(
                        first_line=TrailingWhitespace(
                            whitespace=SimpleWhitespace(
                                value='',
                            ),
                            comment=None,
                            newline=Newline(
                                value=None,
                            ),
                        ),
                        empty_lines=[],
                        indent=True,
                        last_line=SimpleWhitespace(
                            value='        ',
                        ),
                    ),
                ),
                rbrace=RightCurlyBrace(
                    whitespace_before=ParenthesizedWhitespace(
                        first_line=TrailingWhitespace(
                            whitespace=SimpleWhitespace(
                                value='',
                            ),
                            comment=None,
                            newline=Newline(
                                value=None,
                            ),
                        ),
                        empty_lines=[],
                        indent=True,
                        last_line=SimpleWhitespace(
                            value='    ',
                        ),
                    ),
                ),
                lpar=[],
                rpar=[],
            ),
            comma=Comma(
                whitespace_before=SimpleWhitespace(
                    value='',
                ),
                whitespace_after=SimpleWhitespace(
                    value='',
                ),
            ),
            whitespace_before_colon=SimpleWhitespace(
                value='',
            ),
            whitespace_after_colon=SimpleWhitespace(
                value=' ',
            ),
        )

        
def add_to_domain_init(parent, child, parents, children):
    with open('domain/__init__.py', 'r') as source:
        tree = parse_module(source.read())
    
    inserter = DomainDefinitionInserter(parent, child, parents, children)
    new_tree = tree.visit(inserter)
    
    with open('domain/__init__.py', 'w') as source:
        source.write(new_tree.code)




def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('parent', help='The name of the parent resource to create the link from.')
    parser.add_argument('child', help='The name of the child resource to create the link to.')

    args = parser.parse_args()
    parent, parents = singular, plural = get_pair(args.parent)  # TODO: validate, safe name, etc.
    child, children = singular, plural = get_pair(args.child)  # TODO: validate, safe name, etc.

    if os.path.exists('eve_service.py') and os.path.exists('domain'):
        print(f'Creating link rel from {child} (child) to {parent} (parent)')
        print('Until this is automated, please do the following manually:')
        print()
        add_to_domain_init(parent, child, parents, children)
        print(f'''- Add to domain.__init__
    '{parents}_{children}': {{
        'schema': {children}.SCHEMA,
        'url': '{parents}/<regex("[a-f0-9]{{24}}"):_{parent}_ref>/{children}',
        'resource_title': '{children}',
        'datasource': {{'source': '{children}'}}
    }},

- Add to domain.{child}
    '_{parent}_ref': {{
        'type': 'objectid',
        'data_relation': {{
            'resource': '{parents}',
            'embeddable': True
        }}
    }}
    
- Add to hooks.{parent}._add_links_to_{parent}({parent})
    rink['_links']['{children}'] = {{
        'href': '/{parents}/{{0}}/{children}'.format({parent}['_id']),
        'title': '{children}'
    }}

- Add to hooks.{child}._add_links_to_{child}({child})
    if {child}.get('_{parent}_ref'):
        {child}['_links']['parent'] = {{
            'href': '/{parents}/{{0}}'.format({child}['_{parent}_ref']),
            'title': '{parents}'
        }}
        {child}['_links']['collection'] = {{
            'href': '/{parents}/{{0}}/{children}'.format({child}['_{parent}_ref']),
            'title': '{parent}_{children}'
        }}
    else:
        {child}['_links']['parent'] = {{
            'href': '/',
            'title': 'home'
        }}
        {child}['_links']['collection'] = {{
            'href': '/{children}',
            'title': '{children}'
        }}
''')


if __name__ == '__main__':
    main()
